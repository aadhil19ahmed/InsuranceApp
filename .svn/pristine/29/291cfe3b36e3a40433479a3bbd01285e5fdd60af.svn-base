<?xml version="1.0" encoding="UTF-8"?>
<ContentPage xmlns:behaviors="clr-namespace:ACIA.Behaviors;assembly=ACIA" xmlns:converters="clr-namespace:ACIA.Converters;assembly=ACIA" 
             xmlns:viewModelBase="clr-namespace:ACIA.ViewModels.Base;assembly=ACIA" viewModelBase:ViewModelLocator.AutoWireViewModel="true" 
             BackgroundColor="#e8e8e8"  xmlns="http://xamarin.com/schemas/2014/forms" xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml" NavigationPage.HasBackButton="False"
             x:Class="ACIA.Views.AdditionalFormView">
    
    <ContentPage.Title>
        <OnPlatform x:TypeArguments="x:String">
            <On Platform="iOS, Android, UWP, WinRT, WinPhone" Value="Additional Information" />
        </OnPlatform>
    </ContentPage.Title>

    <ContentPage.Resources>
        <ResourceDictionary>
            <converters:DatetimeConverter x:Key="DatetimeConverter" />
            <converters:StringToBoolConverter x:Key="StringToBoolConverter" />
            <converters:FirstValidationErrorConverter x:Key="FirstValidationErrorConverter" />
        </ResourceDictionary>
    </ContentPage.Resources>
    <ContentPage.Padding>
        <OnPlatform x:TypeArguments="Thickness">
            <On Platform="iOS" Value="0, 0, 0, 0" />
        </OnPlatform>
    </ContentPage.Padding>

    <!-- Master -->
    <StackLayout>

        <!-- Step -->
        <StackLayout Orientation="Horizontal">
            <Label Text="Step 4/5" Style="{StaticResource TitleLabelStyle}"/>
        </StackLayout>

        <ScrollView>
            <StackLayout>

                <!-- Policy Details -->
                <StackLayout x:Name="Section" Style="{StaticResource SectionStyle}">
                    <StackLayout Orientation="Horizontal">
                        <Label Text="Policy Details" Style="{StaticResource SectionTitleLabelStyle}"/>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Payment Method" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Picker x:Name="PaymentMethodPicker"  ItemsSource="{Binding PaymentMethods}"
                        SelectedItem="{Binding PaymentMethod, Mode=TwoWay}" Style="{StaticResource PickerInputStyle}"/>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Cover Start Date" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <DatePicker x:Name="CoverStartDatePicker" Date="{Binding CoverStartDate,Converter={StaticResource DatetimeConverter}" Style="{StaticResource PickerInputStyle}"/>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Quote Type" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Picker x:Name="QuoteTypePicker"  ItemsSource="{Binding QuoteTypes}"
                        SelectedItem="{Binding QuoteType, Mode=TwoWay}" Style="{StaticResource PickerInputStyle}">
                        <Picker.Behaviors>
                            <behaviors:EventToCommandBehavior EventName="SelectedIndexChanged"
                                      Command="{Binding QuoteTypePickerCommand}"/>
                          </Picker.Behaviors>
                        </Picker>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Type of Cover" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Picker x:Name="CoverTypePicker"  ItemsSource="{Binding CoverTypes}"
                        SelectedItem="{Binding CoverType, Mode=TwoWay}" Style="{StaticResource PickerInputStyle}"/>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding QuoteTypePickerVisibility}">
                        <Label Text="Was the existing policy with us?" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Switch x:Name="IsExistingPolicySwitch" IsToggled="{Binding IsExistingPolicyWithUs, Mode=TwoWay}">
                        </Switch>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding QuoteTypePickerVisibility}">
                        <Label Text="Policy Number" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Entry x:Name="PolicyNumberEntry" Text="{Binding PolicyNumber, Mode=TwoWay}" Style="{StaticResource EntryInputStyle}" Keyboard="Numeric"/>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding QuoteTypePickerVisibility}">
                        <Label Text="Policy Start Date" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <DatePicker x:Name="PolicyStartDatePicker" Date="{Binding PolicyStartDate,Converter={StaticResource DatetimeConverter}" Style="{StaticResource PickerInputStyle}"/>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding QuoteTypePickerVisibility}">
                        <Label Text="Policy End Date" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <DatePicker x:Name="PolicyEndDatePicker" Date="{Binding PolicyEndDate,Converter={StaticResource DatetimeConverter}" Style="{StaticResource PickerInputStyle}"/>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding QuoteTypePickerVisibility}">
                        <Label Text="Existing Cover Type" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Picker x:Name="ExistingCoverTypePicker"  ItemsSource="{Binding ExistingCoverTypes}"
                        SelectedItem="{Binding ExistingCoverType, Mode=TwoWay}" Style="{StaticResource PickerInputStyle}"/>
                    </StackLayout>
                </StackLayout>

                <!--Some more information about your car-->
                <StackLayout Style="{StaticResource SectionStyle}">
                    <StackLayout Orientation="Horizontal">
                        <Label Text="Some more information about your car" Style="{StaticResource SectionTitleLabelStyle}"/>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="What is the car used for?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <!--Car Usage Stack-->
                        <StackLayout x:Name="CarUsageStack">
                            <Picker x:Name="CarUsedForPicker"  ItemsSource="{Binding CarUsages}" SelectedItem="{Binding CarUsedFor.Value, Mode=TwoWay}" Style="{StaticResource PickerInputStyle}"/>
                            <Label Text="{Binding CarUsedFor.Errors, Converter={StaticResource FirstValidationErrorConverter}"
                        Style="{StaticResource ValidationErrorLabelStyle}" />
                        </StackLayout>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Total Annual Mileage*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <StackLayout x:Name="AnnualMileageStack">
                             <Entry x:Name="AnnualMileageEntry" Text="{Binding TotalAnnualMileage.Value, Mode=TwoWay}" Style="{StaticResource EntryInputStyle}" Keyboard="Numeric"/>     
                            <Label Text="{Binding TotalAnnualMileage.Errors, Converter={StaticResource FirstValidationErrorConverter}"
                        Style="{StaticResource ValidationErrorLabelStyle}" />
                        </StackLayout>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Day time car park?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <!--Daytime Car Park Stack-->
                        <StackLayout x:Name="DaytimeCarParkStack">
                            <Picker x:Name="DayTimeUsagePicker"  ItemsSource="{Binding DayTimeCarParks}" SelectedItem="{Binding DayTimeCarPark.Value, Mode=TwoWay}" Style="{StaticResource PickerInputStyle}"/>
                            <Label Text="{Binding DayTimeCarPark.Errors, Converter={StaticResource FirstValidationErrorConverter}" Style="{StaticResource ValidationErrorLabelStyle}" />
                        </StackLayout>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Overnight car park?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <!--Overnight Car Park Stack-->
                        <StackLayout x:Name="OvernightCarParkStack">
                            <Picker x:Name="OvernightUsagePicker"  ItemsSource="{Binding NightTimeCarParks}" SelectedItem="{Binding NightTimeCarPark.Value, Mode=TwoWay}" Style="{StaticResource PickerInputStyle}"/>
                            <Label Text="{Binding NightTimeCarPark.Errors, Converter={StaticResource FirstValidationErrorConverter}"
                        Style="{StaticResource ValidationErrorLabelStyle}" />
                        </StackLayout>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Does the policy holder have any no claim bonus (NCB)?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Switch x:Name="IsNCBSwitch" IsToggled="{Binding IsNCB, Mode=TwoWay}">
                        <Switch.Behaviors>
                            <behaviors:EventToCommandBehavior
                            EventName="Toggled"
                            Command="{Binding IsNCBCommand}" />
                        </Switch.Behaviors>       
                    </Switch>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding IsNCBVisibility}">
                        <Label Text="NCB Duration" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Picker x:Name="NCBDurationPicker" Style="{StaticResource PickerInputStyle}" ItemsSource="{Binding NCBDurations}" 
                                SelectedItem="{Binding NCBDuration, Mode=TwoWay}"/>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding IsNCBVisibility}">
                    <Label Text="Is the policy holder's NCB currently protected?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                    <Switch x:Name="IsNCBProtectedSwitch" IsToggled="{Binding IsNCBProtected, Mode=TwoWay}">
                    <Switch.Behaviors>
                            <behaviors:EventToCommandBehavior
                            EventName="Toggled"
                            Command="{Binding IsWillNCBProtectCommand}" />
                        </Switch.Behaviors>
                        </Switch>
                        </StackLayout>

                     <StackLayout Orientation="Horizontal" IsVisible="{Binding IsWillNCBVisibility}">
                    <Label Text="Would the policy holder like to protect his no-claim bonus?" Style="{StaticResource QuestionTitleLabelStyle}"/>
                    <Switch x:Name="IsWillNCBProtectSwitch" IsToggled="{Binding IsWillNCBProtect, Mode=TwoWay}">
                        </Switch>
                     </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Does the policy holder own or use another vehicle?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <!--Another vehicle Stack-->
                        <StackLayout x:Name="UseAnothervehicleStack">
                            <Picker x:Name="IsAnotherVehiclePicker"  ItemsSource="{Binding IsAnotherVehicles}"
                        SelectedItem="{Binding IsAnotherVehicle.Value, Mode=TwoWay}" Style="{StaticResource PickerInputStyle}"/>
                            <Label Text="{Binding IsAnotherVehicle.Errors, Converter={StaticResource FirstValidationErrorConverter}"
                        Style="{StaticResource ValidationErrorLabelStyle}" />
                        </StackLayout>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Do you want to add cover for breakdown?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                         <Switch x:Name="AddCoverSwitch" IsToggled="{Binding IsAddBreakdownCover, Mode=TwoWay}">
                        </Switch>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Do you want to add cover for electrical accessories?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                         <Switch x:Name="IsElecCoverSwitch" IsToggled="{Binding IsAddElectricalCover, Mode=TwoWay}">
                        <Switch.Behaviors>
                            <behaviors:EventToCommandBehavior
                            EventName="Toggled"
                            Command="{Binding IsAddElectricalCoverCommand}" />
                        </Switch.Behaviors>       
                    </Switch>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding IsAddElectricalCoverVisibility}">
                        <Label Text="Enter the value of Electrical Accessories" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Entry x:Name="ElecAccEntry" Text="{Binding ElectricalAccessoriesValue, Mode=TwoWay}" Style="{StaticResource EntryInputStyle}" Keyboard="Numeric"/>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Do you want to add cover for non-electrical accessories?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Switch x:Name="IsNonElecCoverSwitch" IsToggled="{Binding IsAddNonElectricalCover, Mode=TwoWay}">
                        <Switch.Behaviors>
                            <behaviors:EventToCommandBehavior
                            EventName="Toggled"
                            Command="{Binding IsAddNonElectricalCoverCommand}" />
                        </Switch.Behaviors>       
                    </Switch>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding IsAddNonElectricalCoverVisibility}">
                        <Label Text="Enter the value of non-Electrical Accessories" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Entry x:Name="NonElecAccEntry" Text="{Binding NonElectricalAccessoriesValue, Mode=TwoWay}" Style="{StaticResource EntryInputStyle}" Keyboard="Numeric"/>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Do you want to add cover for CNG fitment?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Switch x:Name="IsCNGFitmentSwitch" IsToggled="{Binding IsCNGFitmentCover, Mode=TwoWay}">
                        <Switch.Behaviors>
                            <behaviors:EventToCommandBehavior
                            EventName="Toggled"
                            Command="{Binding IsCNGFitmentCommand}" />
                        </Switch.Behaviors>       
                    </Switch>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding IsCNGFitmentCoverVisibility}">
                        <Label Text="Enter value of CNG Fitment" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Entry x:Name="CNGFitmentEntry" Text="{Binding CNGFitmentValue, Mode=TwoWay}" Style="{StaticResource EntryInputStyle}" Keyboard="Numeric"/>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Do you want to add Personal Accident Cover?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Switch x:Name="IsPACover" IsToggled="{Binding IsPersonalAccidentCover, Mode=TwoWay}">
                        </Switch>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Do you want to add Personal Accident Cover for paid driver(s)?" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Switch x:Name="IsPAPaidSwitch" IsToggled="{Binding IsPACoverPaidDrivers, Mode=TwoWay}">
                        <Switch.Behaviors>
                            <behaviors:EventToCommandBehavior
                            EventName="Toggled"
                            Command="{Binding IsPACoverPaidCommand}" />
                        </Switch.Behaviors>       
                    </Switch>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding IsPACoverPaidVisibility}">
                        <Label Text="Enter the number of paid driver(s) you want to add?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <!--NoofPaidDriversPickerStack-->
                        <StackLayout x:Name="NoofPaidDriversPickerStack">
                             <Picker x:Name="NoofPaidDriversPicker" Style="{StaticResource PickerInputStyle}" ItemsSource="{Binding NoOfPaidPicker}" 
                                SelectedItem="{Binding NoOfPaid.Value, Mode=TwoWay}"/>
                            <Label Text="{Binding NoOfPaid.Errors, Converter={StaticResource FirstValidationErrorConverter}"
                        Style="{StaticResource ValidationErrorLabelStyle}" />
                        </StackLayout>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding IsPACoverPaidVisibility}">
                        <Label Text="Enter the sum you want to insure for each paid driver?*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <!--SumofPaidDriversPickerStack-->
                        <StackLayout x:Name="SumofPaidDriversPickerStack">
                          <Entry x:Name="SumofPaidEntry" Text="{Binding SumOfPaid.Value, Mode=TwoWay}" Style="{StaticResource EntryInputStyle}" Keyboard="Numeric"/>
                            <Label Text="{Binding SumOfPaid.Errors, Converter={StaticResource FirstValidationErrorConverter}"
                        Style="{StaticResource ValidationErrorLabelStyle}" />
                        </StackLayout>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Do you want to add Personal Accident Cover for named passenger(s)?" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Switch x:Name="IsPANamedSwitch" IsToggled="{Binding IsPACoverNamedPassengers, Mode=TwoWay}">
                        <Switch.Behaviors>
                            <behaviors:EventToCommandBehavior
                            EventName="Toggled"
                            Command="{Binding IsPACoverNamedCommand}" />
                        </Switch.Behaviors>       
                    </Switch>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding IsPANamedVisibility}">
                        <Label Text="Enter the number of named passenger(s) you want to add*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <!--NoofNamedPassengersPickerStack-->
                        <StackLayout x:Name="NoofNamedPassengersPickerStack">
                             <Picker x:Name="NoofNamedPassengersPicker" Style="{StaticResource PickerInputStyle}" ItemsSource="{Binding NoOfPaidPicker}" 
                                SelectedItem="{Binding NoOfNamedPassengers.Value, Mode=TwoWay}"/>
                            <Label Text="{Binding NoOfNamedPassengers.Errors, Converter={StaticResource FirstValidationErrorConverter}"
                        Style="{StaticResource ValidationErrorLabelStyle}" />
                        </StackLayout>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding IsPANamedVisibility}">
                        <Label Text="Enter the sum you want to insure for each named passenger*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <!--SumofNamedPassengersPickerStack-->
                        <StackLayout x:Name="SumofNamedPassengersPickerStack">
                          <Entry x:Name="SumofNamedPassengersEntry" Text="{Binding SumOfNamedPassengers.Value, Mode=TwoWay}" Style="{StaticResource EntryInputStyle}" Keyboard="Numeric"/>
                            <Label Text="{Binding SumOfNamedPassengers.Errors, Converter={StaticResource FirstValidationErrorConverter}"
                        Style="{StaticResource ValidationErrorLabelStyle}" />
                        </StackLayout>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Do you want to add Personal Accident Cover for un-named Passenger(s)?" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <Switch x:Name="IsPAUnNamedSwitch" IsToggled="{Binding IsPACoverUnnamedPassengers, Mode=TwoWay}">
                        <Switch.Behaviors>
                            <behaviors:EventToCommandBehavior
                            EventName="Toggled"
                            Command="{Binding IsPACoverUnNamedCommand}" />
                        </Switch.Behaviors>       
                    </Switch>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding IsPAUnNamedVisibility}">
                        <Label Text="Enter the number of un-named passenger(s) you want to add*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <!--NoofUnNamedPassengersPickerStack-->
                        <StackLayout x:Name="NoofUnNamedPassengersPickerStack">
                             <Picker x:Name="NoofUnNamedPassengersPicker" Style="{StaticResource PickerInputStyle}" ItemsSource="{Binding NoOfPaidPicker}" 
                                SelectedItem="{Binding NoOfUnNamedPassengers.Value, Mode=TwoWay}"/>
                            <Label Text="{Binding NoOfUnNamedPassengers.Errors, Converter={StaticResource FirstValidationErrorConverter}"
                        Style="{StaticResource ValidationErrorLabelStyle}" />
                        </StackLayout>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal" IsVisible="{Binding IsPAUnNamedVisibility}">
                        <Label Text="Enter the sum you want to insure for each un-named passenger*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <!--SumofUnNamedPassengersPickerStack-->
                        <StackLayout x:Name="SumofUnNamedPassengersPickerStack">
                          <Entry x:Name="SumofUnNamedPassengersEntry" Text="{Binding SumOfUnNamedPassengers.Value, Mode=TwoWay}" Style="{StaticResource EntryInputStyle}" Keyboard="Numeric"/>
                            <Label Text="{Binding SumOfUnNamedPassengers.Errors, Converter={StaticResource FirstValidationErrorConverter}"
                        Style="{StaticResource ValidationErrorLabelStyle}" />
                        </StackLayout>
                    </StackLayout>

                    <StackLayout Orientation="Horizontal">
                        <Label Text="Select the voluntary excess the policy holder wants to pay*" Style="{StaticResource QuestionTitleLabelStyle}"/>
                        <!--Another vehicle Stack-->
                        <StackLayout x:Name="VoluntaryExcessStack">
                            <Picker x:Name="VoluntaryExcessPicker"  ItemsSource="{Binding VoluntaryExcessPays}"
                        SelectedItem="{Binding VoluntaryExcess.Value, Mode=TwoWay}" Style="{StaticResource PickerInputStyle}"/>
                            <Label Text="{Binding VoluntaryExcess.Errors, Converter={StaticResource FirstValidationErrorConverter}"
                        Style="{StaticResource ValidationErrorLabelStyle}" />
                        </StackLayout>
                    </StackLayout>
                    
                </StackLayout>
            </StackLayout>
         
        </ScrollView>
        <!--Save and Continue-->
        <StackLayout>
            <StackLayout Orientation="Horizontal">
                <Button Text="Previous" Style="{StaticResource ButtonStyle}" HorizontalOptions="FillAndExpand" Command="{Binding PreviousCommand}"/>
                <Button Text="Continue Later" Style="{StaticResource ButtonStyle}" HorizontalOptions="FillAndExpand" Command="{Binding SaveAndContinueLaterCommand}"/>
                <Button Text="Get Quote" Command="{Binding SaveCommand}" Style="{StaticResource ButtonStyle}" HorizontalOptions="FillAndExpand"/>
            </StackLayout>
        </StackLayout>
    </StackLayout>
</ContentPage>

